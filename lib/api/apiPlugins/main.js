/** 
The REST APIs give you the access to all the contents.

**Base URL**

https://www.littleant.com/api/1.0

**Resource URL schema**

The schema of the resource URL is like {base_rul}/{resource_type}s/{resource_id}. The syntax of the resource URL are:

 * The resource URL begins with the base URL.
 * The URL isn't end with the forward slash.
 * The segment of the resource_type adopts the plural form.
 * If the URL ends with the resource_type, that means the resource container is accessed. If the URL ends with the resource_id, that means only the specific resource object is accessed.

**CORS**

[CORS](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing "CORS") is supported.
 
**Input/Output Format**

By default, request body data is expected as JSON and response body data is sent back as JSON. The content type "Content-Type: application/json" is required in the http header.

**Date time format**

The format of the date string follows the standard [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601 "ISO 8601"). The extended format with UTC time zone designator is adopted. The date string format is YYYY-MM-DDT[hh]:[mm]:[ss]Z. One example is 2012-11-02T06:23:45Z.

**Resource object**

For each resource object, there are a minimum representation and a full representation. Generally when create the resource or query the resource by its id, the full resource object is returned. When a resource object is referenced by the other one, only the minimum resource object is contained in the container object. The resource id is unique in all the objects of the same type.  The API 'GET /api/{version}/{resource_type}s/{id}' can always return the unambiguous full resource object.


Some common properties contained in different objects have the same meanings. They are described in the table below.
<table>
    <tr>
        <td>**Property**</td><td>**Type**</td><td>**Description**</td>
    </tr>
    <tr>
        <td>type</td><td>string</td><td>The resource type</td>
    </tr>
    <tr>
        <td>id</td><td>string</td><td>A unique string identifying this resource object. It is generated by the server. </td>
    </tr>
    <tr>
        <td>parent</td><td>object</td><td>The mini resource object which this object is attached to.</td>
    </tr>
    <tr>
        <td>created_by</td><td>object</td><td>The mini user object who created this resource object.</td>
    </tr>
    <tr>
        <td>created_at</td><td>string</td><td>The time this resource object is created</td>
    </tr>
    <tr>
        <td>modified_by</td><td>object</td><td>The mini user object who modified this resource object.</td>
    </tr>
    <tr>
        <td>modified_at</td><td>string</td><td>The time this resource object is modified.</td>
    </tr>
</table>


**Request example**

Example API calls are provided with the tool [cURL](http://curl.haxx.se/ "cURL"), which is a standard command line tool. 

**HTTP method**
<table>
    <tr>
        <td>Method</td><td>Description</td>
    </tr>
    <tr>
        <td>GET</td><td>Read the resource. It doesn?t change the status of the resource. Repetitive queries will get the same results.</td>
    </tr>
    <tr>
        <td>POST</td><td>Create a new resource object.</td>
    </tr>
    <tr>
        <td>PUT</td><td>Update an existing resource object.</td>
    </tr>
    <tr>
        <td>DELETE</td><td>Delete an existing resource object.</td>
    </tr>
</table>

**Authentication**

WIP

@main Core
@module Core
*/

/*
Empty function
*/
var addRoute = function(options){
	return this;
};

/*
* Exports
*/

module.exports = addRoute;